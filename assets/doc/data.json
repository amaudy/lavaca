{
    "project": {
        "name": "",
        "description": "",
        "version": "",
        "url": ""
    },
    "files": {
        "src/www/js/app/net/BaseController.js": {
            "name": "src/www/js/app/net/BaseController.js",
            "modules": {},
            "classes": {
                "app.net.BaseController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/app/net/HomeController.js": {
            "name": "src/www/js/app/net/HomeController.js",
            "modules": {},
            "classes": {
                "app.net.HomeController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/app/ui/views/controls/HeaderView.js": {
            "name": "src/www/js/app/ui/views/controls/HeaderView.js",
            "modules": {},
            "classes": {
                "app.ui.views.globalUI.HeaderView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/app/ui/views/BaseView.js": {
            "name": "src/www/js/app/ui/views/BaseView.js",
            "modules": {},
            "classes": {
                "app.ui.views.BaseView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/app/ui/views/HomeView.js": {
            "name": "src/www/js/app/ui/views/HomeView.js",
            "modules": {},
            "classes": {
                "app.ui.views.HomeView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/app/app.js": {
            "name": "src/www/js/app/app.js",
            "modules": {},
            "classes": {
                "app": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/extlibs/jquery.hammer.js": {
            "name": "src/www/js/extlibs/jquery.hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/env/ChildBrowser.js": {
            "name": "src/www/js/lavaca/env/ChildBrowser.js",
            "modules": {},
            "classes": {
                "lavaca.env.ChildBrowser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/env/Device.js": {
            "name": "src/www/js/lavaca/env/Device.js",
            "modules": {},
            "classes": {
                "lavaca.env.Device": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/events/EventDispatcher.js": {
            "name": "src/www/js/lavaca/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "lavaca.events.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/fx/Animation.js": {
            "name": "src/www/js/lavaca/fx/Animation.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Animation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/fx/Transform.js": {
            "name": "src/www/js/lavaca/fx/Transform.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/fx/Transition.js": {
            "name": "src/www/js/lavaca/fx/Transition.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Transition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/Application.js": {
            "name": "src/www/js/lavaca/mvc/Application.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Application": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/Collection.js": {
            "name": "src/www/js/lavaca/mvc/Collection.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.ItemEvent": 1,
                "lavaca.mvc.Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/Controller.js": {
            "name": "src/www/js/lavaca/mvc/Controller.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/Model.js": {
            "name": "src/www/js/lavaca/mvc/Model.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.AttributeEvent": 1,
                "lavaca.mvc.Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/Route.js": {
            "name": "src/www/js/lavaca/mvc/Route.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/Router.js": {
            "name": "src/www/js/lavaca/mvc/Router.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/View.js": {
            "name": "src/www/js/lavaca/mvc/View.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/mvc/ViewManager.js": {
            "name": "src/www/js/lavaca/mvc/ViewManager.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.ViewManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/net/Connectivity.js": {
            "name": "src/www/js/lavaca/net/Connectivity.js",
            "modules": {},
            "classes": {
                "lavaca.net.Connectivity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/net/History.js": {
            "name": "src/www/js/lavaca/net/History.js",
            "modules": {},
            "classes": {
                "lavaca.net.History": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/storage/LocalStore.js": {
            "name": "src/www/js/lavaca/storage/LocalStore.js",
            "modules": {},
            "classes": {
                "lavaca.storage.LocalStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/storage/Store.js": {
            "name": "src/www/js/lavaca/storage/Store.js",
            "modules": {},
            "classes": {
                "lavaca.storage.Store": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/ui/DustTemplate.js": {
            "name": "src/www/js/lavaca/ui/DustTemplate.js",
            "modules": {},
            "classes": {
                "lavaca.ui.DustTemplate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/ui/Form.js": {
            "name": "src/www/js/lavaca/ui/Form.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Form": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/ui/LoadingIndicator.js": {
            "name": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "modules": {},
            "classes": {
                "lavaca.ui.LoadingIndicator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/ui/Scrollable.js": {
            "name": "src/www/js/lavaca/ui/Scrollable.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Scrollable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/ui/Template.js": {
            "name": "src/www/js/lavaca/ui/Template.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Template": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/ui/Widget.js": {
            "name": "src/www/js/lavaca/ui/Widget.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Widget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/ArrayUtils.js": {
            "name": "src/www/js/lavaca/util/ArrayUtils.js",
            "modules": {},
            "classes": {
                "lavaca.util.ArrayUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/Cache.js": {
            "name": "src/www/js/lavaca/util/Cache.js",
            "modules": {},
            "classes": {
                "lavaca.util.Cache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/Config.js": {
            "name": "src/www/js/lavaca/util/Config.js",
            "modules": {},
            "classes": {
                "lavaca.util.Config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/DateUtils.js": {
            "name": "src/www/js/lavaca/util/DateUtils.js",
            "modules": {},
            "classes": {
                "lavaca.util.DateUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/Disposable.js": {
            "name": "src/www/js/lavaca/util/Disposable.js",
            "modules": {},
            "classes": {
                "lavaca.util.Disposable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/Map.js": {
            "name": "src/www/js/lavaca/util/Map.js",
            "modules": {},
            "classes": {
                "lavaca.util.Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/Promise.js": {
            "name": "src/www/js/lavaca/util/Promise.js",
            "modules": {},
            "classes": {
                "lavaca.util.Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/StringUtils.js": {
            "name": "src/www/js/lavaca/util/StringUtils.js",
            "modules": {},
            "classes": {
                "lavaca.util.StringUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/Translation.js": {
            "name": "src/www/js/lavaca/util/Translation.js",
            "modules": {},
            "classes": {
                "lavaca.util.Translation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/delay.js": {
            "name": "src/www/js/lavaca/util/delay.js",
            "modules": {},
            "classes": {
                "lavaca.util.delay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/extend.js": {
            "name": "src/www/js/lavaca/util/extend.js",
            "modules": {},
            "classes": {
                "lavaca.util.extend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/log.js": {
            "name": "src/www/js/lavaca/util/log.js",
            "modules": {},
            "classes": {
                "lavaca.util.log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/resolve.js": {
            "name": "src/www/js/lavaca/util/resolve.js",
            "modules": {},
            "classes": {
                "lavaca.util.resolve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/www/js/lavaca/util/uuid.js": {
            "name": "src/www/js/lavaca/util/uuid.js",
            "modules": {},
            "classes": {
                "lavaca.util.uuid": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "app.net.BaseController": {
            "name": "app.net.BaseController",
            "shortname": "app.net.BaseController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/app/net/BaseController.js",
            "line": 7,
            "description": "Base controller",
            "extends": "Lavaca.mvc.Controller"
        },
        "app.net.HomeController": {
            "name": "app.net.HomeController",
            "shortname": "app.net.HomeController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/app/net/HomeController.js",
            "line": 7,
            "description": "Home controller",
            "extends": "app.net.BaseController"
        },
        "app.ui.views.globalUI.HeaderView": {
            "name": "app.ui.views.globalUI.HeaderView",
            "shortname": "app.ui.views.globalUI.HeaderView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/app/ui/views/controls/HeaderView.js",
            "line": 7,
            "description": "Header view type",
            "super": "Lavaca.mvc.View"
        },
        "app.ui.views.BaseView": {
            "name": "app.ui.views.BaseView",
            "shortname": "app.ui.views.BaseView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 10,
            "description": "A View from which all other application Views can extend.\nAdds support for animating between views.",
            "extends": "Lavaca.mvc.View"
        },
        "app.ui.views.HomeView": {
            "name": "app.ui.views.HomeView",
            "shortname": "app.ui.views.HomeView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/app/ui/views/HomeView.js",
            "line": 6,
            "description": "Example view type",
            "extends": "app.ui.views.BaseView"
        },
        "app": {
            "name": "app",
            "shortname": "app",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/app/app.js",
            "line": 16,
            "description": "Global application-specific object",
            "extends": "Lavaca.mvc.Application"
        },
        "lavaca.env.ChildBrowser": {
            "name": "lavaca.env.ChildBrowser",
            "shortname": "lavaca.env.ChildBrowser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/env/ChildBrowser.js",
            "line": 7,
            "description": "A sub-browser management utility (also accessible via window.plugins.childBrowser)",
            "extends": "Lavaca.events.EventDispatcher",
            "itemtype": "event",
            "is_constructor": 1
        },
        "lavaca.env.Device": {
            "name": "lavaca.env.Device",
            "shortname": "lavaca.env.Device",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/env/Device.js",
            "line": 7,
            "description": "Static utility type for working with Cordova (aka PhoneGap) and other non-standard native functionality"
        },
        "lavaca.events.EventDispatcher": {
            "name": "lavaca.events.EventDispatcher",
            "shortname": "lavaca.events.EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 6,
            "description": "Basic event dispatcher type",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1
        },
        "lavaca.fx.Animation": {
            "name": "lavaca.fx.Animation",
            "shortname": "lavaca.fx.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 36,
            "description": "Static utility type for working with CSS keyframe animations"
        },
        "lavaca.fx.Transform": {
            "name": "lavaca.fx.Transform",
            "shortname": "lavaca.fx.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 87,
            "description": "Static utility type for working with CSS transforms"
        },
        "lavaca.fx.Transition": {
            "name": "lavaca.fx.Transition",
            "shortname": "lavaca.fx.Transition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 31,
            "description": "Static utility type for working with CSS transitions"
        },
        "lavaca.mvc.Application": {
            "name": "lavaca.mvc.Application",
            "shortname": "lavaca.mvc.Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 29,
            "description": "Base application type",
            "extends": "lavaca.events.EventDispatcher"
        },
        "lavaca.mvc.ItemEvent": {
            "name": "lavaca.mvc.ItemEvent",
            "shortname": "lavaca.mvc.ItemEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 34,
            "description": "Event type used when a model in a collection has an event",
            "extends": "lavaca.events.EventDispatcher",
            "itemtype": "property",
            "type": "Lavaca.mvc.Collection",
            "default": "null\nThe index of the event-causing model before the event"
        },
        "lavaca.mvc.Collection": {
            "name": "lavaca.mvc.Collection",
            "shortname": "lavaca.mvc.Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 57,
            "super": "Model\nBasic model collection type",
            "itemtype": "event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "models",
                    "description": "A list of models to add to the collection",
                    "type": "Array"
                },
                {
                    "name": "map",
                    "description": "A parameter hash to apply to the collection",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.Controller": {
            "name": "lavaca.mvc.Controller",
            "shortname": "lavaca.mvc.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 10,
            "description": "Base type for controllers",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "other",
                    "description": "Another controller from which to take context information",
                    "type": "Lavaca.mvc.Controller"
                },
                {
                    "name": "router",
                    "description": "The application's router",
                    "type": "Lavaca.mvc.Router",
                    "optional": true
                },
                {
                    "name": "viewManager",
                    "description": "The application's view manager",
                    "type": "Lavaca.mvc.ViewManager",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.AttributeEvent": {
            "name": "lavaca.mvc.AttributeEvent",
            "shortname": "lavaca.mvc.AttributeEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 66,
            "description": "Event type used when an attribute is modified",
            "extends": "Event"
        },
        "lavaca.mvc.Model": {
            "name": "lavaca.mvc.Model",
            "shortname": "lavaca.mvc.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 92,
            "description": "Basic model type",
            "extends": "lavaca.events.EventDispatcher\n\nPlace the events where they are triggered in the code, see the yuidoc syntax reference and view.js for rendersuccess trigger",
            "itemtype": "event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "A parameter hash to apply to the model",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.Route": {
            "name": "lavaca.mvc.Route",
            "shortname": "lavaca.mvc.Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Route.js",
            "line": 63,
            "extends": "lavaca.util.Disposable\nA relationship between a URL pattern and a controller action",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern\n  Route URL patterns should be in the form /path/{foo}/path/{*bar}.\n  The path variables, along with query string parameters, will be passed\n  to the controller action as a params object. In this case, when passed\n  the URL /path/something/path/1/2/3?abc=def, the params object would be\n  {foo: 'something', bar: [1, 2, 3], abc: 'def'}.",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller that performs the action\n  (Should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value pairs that will be merged into the params\n  object that is passed to the controller action",
                    "type": "Object"
                }
            ]
        },
        "lavaca.mvc.Router": {
            "name": "lavaca.mvc.Router",
            "shortname": "lavaca.mvc.Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 8,
            "extends": "lavaca.util.Disposable\nURL manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewManager",
                    "description": "The view manager",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ]
        },
        "lavaca.mvc.View": {
            "name": "lavaca.mvc.View",
            "shortname": "lavaca.mvc.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 16,
            "description": "Base View Class",
            "extends": "lavaca.events.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "the selector or Object for the element to attach to the view",
                    "type": "Object | String"
                },
                {
                    "name": "model",
                    "description": "the model for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "parentView",
                    "description": "the parent view for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "el",
                    "description": "the selector or Object for the element to attach to the view",
                    "type": "Object | String"
                },
                {
                    "name": "model",
                    "description": "the model for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "layer",
                    "description": "The layer on which the view sits (only applicable to views used as a PageView)",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.ViewManager": {
            "name": "lavaca.mvc.ViewManager",
            "shortname": "lavaca.mvc.ViewManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 12,
            "description": "Manager responsible for drawing views",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The element that contains all layers",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.net.Connectivity": {
            "name": "lavaca.net.Connectivity",
            "shortname": "lavaca.net.Connectivity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/net/Connectivity.js",
            "line": 7,
            "description": "A utility type for working under different network connectivity situatioConnectivity."
        },
        "lavaca.net.History": {
            "name": "lavaca.net.History",
            "shortname": "lavaca.net.History",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/net/History.js",
            "line": 27,
            "description": "HTML5 history abstraction layer",
            "extends": "lavaca.events.EventDispatcher",
            "itemtype": "event",
            "is_constructor": 1
        },
        "lavaca.storage.LocalStore": {
            "name": "lavaca.storage.LocalStore",
            "shortname": "lavaca.storage.LocalStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 27,
            "description": "An object for manage local storage",
            "extends": "lavaca.storage.Store"
        },
        "lavaca.storage.Store": {
            "name": "lavaca.storage.Store",
            "shortname": "lavaca.storage.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/storage/Store.js",
            "line": 9,
            "description": "An object for manage local storage",
            "extends": "lavaca.util.Disposable"
        },
        "lavaca.ui.DustTemplate": {
            "name": "lavaca.ui.DustTemplate",
            "shortname": "lavaca.ui.DustTemplate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 11,
            "description": "Base type for templates that use the dust engine",
            "extends": "lavaca.ui.Template",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The unique name of the template",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "A URL from which to load the template",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The raw string code of the template's body",
                    "type": "String"
                }
            ]
        },
        "lavaca.ui.Form": {
            "name": "lavaca.ui.Form",
            "shortname": "lavaca.ui.Form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 49,
            "description": "Basic form type",
            "extends": "lavaca.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.ui.LoadingIndicator": {
            "name": "lavaca.ui.LoadingIndicator",
            "shortname": "lavaca.ui.LoadingIndicator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "line": 6,
            "description": "Type that shows/hides a loading indicator",
            "extends": "lavaca.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.ui.Scrollable": {
            "name": "lavaca.ui.Scrollable",
            "shortname": "lavaca.ui.Scrollable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 28,
            "description": "Overflow Scroll Container for mobile using overflow scrolling: touch or iScroll",
            "extends": "lavaca.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.ui.Template": {
            "name": "lavaca.ui.Template",
            "shortname": "lavaca.ui.Template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 9,
            "description": "Abstract type for templates",
            "extends": "lavaca.util.Map"
        },
        "lavaca.ui.Widget": {
            "name": "lavaca.ui.Widget",
            "shortname": "lavaca.ui.Widget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/ui/Widget.js",
            "line": 7,
            "description": "Base type for all UI elements",
            "extends": "lavaca.events.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.util.ArrayUtils": {
            "name": "lavaca.util.ArrayUtils",
            "shortname": "lavaca.util.ArrayUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/ArrayUtils.js",
            "line": 3,
            "description": "Utility class for working with arrays"
        },
        "lavaca.util.Cache": {
            "name": "lavaca.util.Cache",
            "shortname": "lavaca.util.Cache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 6,
            "description": "Object for storing data",
            "extends": "lavaca.util.Disposable"
        },
        "lavaca.util.Config": {
            "name": "lavaca.util.Config",
            "shortname": "lavaca.util.Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 15,
            "description": "Configuration management type",
            "extends": "lavaca.util.Map"
        },
        "lavaca.util.DateUtils": {
            "name": "lavaca.util.DateUtils",
            "shortname": "lavaca.util.DateUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 5,
            "description": "Utility class for working with dates"
        },
        "lavaca.util.Disposable": {
            "name": "lavaca.util.Disposable",
            "shortname": "lavaca.util.Disposable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/Disposable.js",
            "line": 29,
            "description": "Abstract type for types that need to ready themselves for GC",
            "is_constructor": 1
        },
        "lavaca.util.Map": {
            "name": "lavaca.util.Map",
            "shortname": "lavaca.util.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 22,
            "description": "Abstract type for lookup tables",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URL of the map's data (or null if code is supplied)",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The raw string data for the map (or null if src is supplied)",
                    "type": "String"
                }
            ]
        },
        "lavaca.util.Promise": {
            "name": "lavaca.util.Promise",
            "shortname": "lavaca.util.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 5,
            "description": "Utility type for asynchronous programming",
            "is_constructor": 1,
            "params": [
                {
                    "name": "thisp",
                    "description": "What the \"this\" keyword resolves to in callbacks",
                    "type": "Object"
                }
            ]
        },
        "lavaca.util.StringUtils": {
            "name": "lavaca.util.StringUtils",
            "shortname": "lavaca.util.StringUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/StringUtils.js",
            "line": 15,
            "description": "Static utility type for working with strings"
        },
        "lavaca.util.Translation": {
            "name": "lavaca.util.Translation",
            "shortname": "lavaca.util.Translation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 19,
            "description": "Translation dictionary",
            "extends": "lavaca.util.Map",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URL of the map's data (or null if code is supplied)",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The raw string data for the map (or null if src is supplied)",
                    "type": "String"
                }
            ]
        },
        "lavaca.util.delay": {
            "name": "lavaca.util.delay",
            "shortname": "lavaca.util.delay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/delay.js",
            "line": 2,
            "description": "Wraps setTimeout and delays the execution of a function"
        },
        "lavaca.util.extend": {
            "name": "lavaca.util.extend",
            "shortname": "lavaca.util.extend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/extend.js",
            "line": 2,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides)."
        },
        "lavaca.util.log": {
            "name": "lavaca.util.log",
            "shortname": "lavaca.util.log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/log.js",
            "line": 2,
            "description": "Logs to the console (or alerts if no console exists)"
        },
        "lavaca.util.resolve": {
            "name": "lavaca.util.resolve",
            "shortname": "lavaca.util.resolve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/resolve.js",
            "line": 2,
            "description": "Looks up or creates an object, given its global path (ie, 'Lavaca.resolve' resolves to this function,\n'no.obj.exists' resolves to null)"
        },
        "lavaca.util.uuid": {
            "name": "lavaca.util.uuid",
            "shortname": "lavaca.util.uuid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/www/js/lavaca/util/uuid.js",
            "line": 4,
            "description": "Produces a app specific unique identifier"
        }
    },
    "classitems": [
        {
            "file": "src/www/js/app/net/HomeController.js",
            "line": 13,
            "description": "Home action, creates a history state and shows a view",
            "itemtype": "method",
            "name": "home",
            "params": [
                {
                    "name": "params",
                    "description": "Action arguments",
                    "type": "Object"
                },
                {
                    "name": "history",
                    "description": "History state model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "app.net.HomeController"
        },
        {
            "file": "src/www/js/app/ui/views/controls/HeaderView.js",
            "line": 21,
            "description": "The name of the template used by the view",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "'templates/header'",
            "class": "app.ui.views.globalUI.HeaderView"
        },
        {
            "file": "src/www/js/app/ui/views/controls/HeaderView.js",
            "line": 27,
            "description": "A class name added to the view container",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "'header'",
            "class": "app.ui.views.globalUI.HeaderView"
        },
        {
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 23,
            "description": "The name of the template used by the view",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "'default'",
            "class": "app.ui.views.BaseView"
        },
        {
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 29,
            "description": "The name of the template used by the view",
            "itemtype": "property",
            "name": "pageTransition",
            "type": "Object",
            "default": "'default'",
            "class": "app.ui.views.BaseView"
        },
        {
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 41,
            "description": "Executes when the template renders successfully. This implementation\nadds support for animations between views, based off of the animation\nproperty on the prototype.",
            "itemtype": "method",
            "name": "onRenderSuccess",
            "params": [
                {
                    "name": "e",
                    "description": "The render event. This object should have a string property named \"html\"\n  that contains the template's rendered HTML output.",
                    "type": "Event"
                }
            ],
            "class": "app.ui.views.BaseView"
        },
        {
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 53,
            "description": "Handler for when a cancel control is tapped",
            "itemtype": "method",
            "name": "onTapCancel",
            "params": [
                {
                    "name": "e",
                    "description": "The tap event.",
                    "type": "Event"
                }
            ],
            "class": "app.ui.views.BaseView"
        },
        {
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 63,
            "description": "Executes when the user navigates to this view. This implementation\nadds support for animations between views, based off of the animation\nproperty on the prototype.",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "exitingViews",
                    "description": "The views that are exiting as this one enters",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "app.ui.views.BaseView"
        },
        {
            "file": "src/www/js/app/ui/views/BaseView.js",
            "line": 129,
            "description": "Executes when the user navigates away from this view. This implementation\nadds support for animations between views, based off of the animation\nproperty on the prototype.",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "enteringViews",
                    "description": "The views that are entering as this one exits",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "app.ui.views.BaseView"
        },
        {
            "file": "src/www/js/app/ui/views/HomeView.js",
            "line": 12,
            "description": "The name of the template used by the view",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "'home'",
            "class": "app.ui.views.HomeView"
        },
        {
            "file": "src/www/js/app/ui/views/HomeView.js",
            "line": 18,
            "description": "A class name added to the view container",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "'home'",
            "class": "app.ui.views.HomeView"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 10,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 80,
            "description": "setup events to detect gestures on the document",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 106,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 149,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 164,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 179,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 203,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 214,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 223,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 230,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 238,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 252,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 345,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 379,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 405,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 429,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 443,
            "description": "stop bubbling the event up to its parents",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 450,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 463,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 469,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 484,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 501,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 519,
            "description": "get events",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 530,
            "description": "reset the list",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 540,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 559,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 577,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 597,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 612,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 625,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 644,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 657,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 674,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 690,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 700,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 754,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 778,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 822,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 840,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 888,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 927,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name!~YUIDOC_LINE~!this",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler!~YUIDOC_LINE~!this",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData!~YUIDOC_LINE~!",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name!~YUIDOC_LINE~!",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent!~YUIDOC_LINE~!",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent!~YUIDOC_LINE~!",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1034,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1080,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1126,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1160,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1265,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1355,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1391,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1431,
            "description": "bind dom events\nthis overwrites addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventTypes",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1472,
            "description": "the methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "this": "{Hammer.Instance}",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1486,
            "description": "trigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "this": "{Hammer.Instance}",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/extlibs/jquery.hammer.js",
            "line": 1507,
            "description": "jQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/lavaca/env/ChildBrowser.js",
            "line": 19,
            "description": "Opens a web page in the child browser (or navigates to it)",
            "itemtype": "method",
            "name": "showWebPage",
            "params": [
                {
                    "name": "loc",
                    "description": "The URL to open",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/lavaca/env/ChildBrowser.js",
            "line": 38,
            "description": "Closes the child browser, if it's open",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.env.ChildBrowser"
        },
        {
            "file": "src/www/js/lavaca/env/Device.js",
            "line": 17,
            "description": "Indicates whether or not the app is being run through Cordova",
            "itemtype": "method",
            "name": "isCordova",
            "static": 1,
            "return": {
                "description": "True if app is being run through Cordova",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/www/js/lavaca/env/Device.js",
            "line": 27,
            "description": "Registers a plugin to be initialized when the device is ready",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "TPlugin",
                    "description": "The plugin to register. The plugin should be a constructor function",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/www/js/lavaca/env/Device.js",
            "line": 49,
            "description": "Executes a Cordova command, if Cordova is available",
            "itemtype": "method",
            "name": "exec",
            "static": 1,
            "params": [
                {
                    "name": "className",
                    "description": "The name of the native class",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "The name of the class method to call",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments to pass the method",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/www/js/lavaca/env/Device.js",
            "line": 69,
            "description": "Executes a callback when the device is ready to be used",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The handler to execute when the device is ready",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 14,
            "description": "When true, do not fire events",
            "itemtype": "property",
            "name": "suppressEvents",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 22,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 30,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 45,
            "description": "Unbinds all event handler from this object",
            "itemtype": "method",
            "name": "off",
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 51,
            "description": "Unbinds all event handlers for an event",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 58,
            "description": "Unbinds a specific event handler",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function handling the event",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 66,
            "description": "Unbinds a specific event handler",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function handling the event",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 107,
            "description": "Dispatches an event",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to dispatch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 114,
            "description": "Dispactches an event with additional parameters",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to dispatch",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Additional data points to add to the event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 136,
            "description": "Creates an event object",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to create",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/events/EventDispatcher.js",
            "line": 143,
            "description": "Creates an event object with additional params",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to create",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Additional data points to add to the event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 41,
            "description": "Whether or not animations are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True if CSS keyframe animations are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 52,
            "description": "Converts a list of keyframes to a CSS animation",
            "itemtype": "method",
            "name": "keyframesToCSS",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the keyframe animation",
                    "type": "String"
                },
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The CSS keyframe animation declaration",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 88,
            "description": "Generates a keyframe animation",
            "itemtype": "method",
            "name": "generateKeyframes",
            "static": 1,
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name fo the animation",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 96,
            "description": "Generates a keyframe animation",
            "itemtype": "method",
            "name": "generateKeyframes",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name fo the animation",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 114,
            "description": "Gets the name of the animation CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 125,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the animation",
                    "type": "Object"
                }
            ],
            "opt": "{Function} complete  A function to execute when the animation has completed",
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 144,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options for the animation",
                    "type": "Object"
                }
            ],
            "opt": "{Function} complete  A function to execute when the animation has completed",
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 164,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds that the animation lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The name of a CSS easing function",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "The number of milliseconds before the animation should start",
                    "type": "Number"
                },
                {
                    "name": "iterations",
                    "description": "Either the number of iterations to play the animation or 'infinite'",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "The name of a CSS animation direction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the animation has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 178,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds that the animation lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The name of a CSS easing function",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "The number of milliseconds before the animation should start",
                    "type": "Number"
                },
                {
                    "name": "iterations",
                    "description": "Either the number of iterations to play the animation or 'infinite'",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "The name of a CSS animation direction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the animation has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 223,
            "description": "Binds an animation end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.animationEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                },
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handler will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 246,
            "description": "Binds an animation end handler to an element's next animation end event",
            "itemtype": "method",
            "name": "$.fn.nextAnimationEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Animation.js",
            "line": 253,
            "description": "Binds an animation end handler to an element's next animation end event",
            "itemtype": "method",
            "name": "$.fn.nextAnimationEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handler will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 92,
            "description": "Whether or not transforms are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True when transforms are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 103,
            "description": "Whether or not 3D transforms are supported by the browser",
            "itemtype": "method",
            "name": "is3dSupported",
            "static": 1,
            "return": {
                "description": "True when 3D transforms are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 114,
            "description": "Converts a transform hash into a CSS string",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 157,
            "description": "Gets the name of the transform CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 168,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 175,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 204,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 212,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin",
                    "type": "String"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 242,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin, in the form {x: N, y: N},\n     where N is a decimal percentage between -1 and 1 or N is a pixel value > 1 or < -1.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transform.js",
            "line": 251,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin, in the form {x: N, y: N},\n     where N is a decimal percentage between -1 and 1 or N is a pixel value > 1 or < -1.",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 36,
            "description": "Whether or not transitions are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True when CSS transitions are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 47,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A hash in which the keys are the names of the CSS properties",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 56,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "An array of CSS property names",
                    "type": "Array"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 65,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A hash in which the keys are the names of the CSS properties",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 75,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "An array of CSS property names",
                    "type": "Array"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 99,
            "description": "Gets the name of the transition CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 110,
            "description": "Gets the name of the transition end event",
            "itemtype": "method",
            "name": "transitionEndEvent",
            "static": 1,
            "return": {
                "description": "The name of the event",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 121,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 129,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 138,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 147,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 180,
            "description": "Binds a transition end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.transitionEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 187,
            "description": "Binds a transition end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.transitionEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handlers will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 203,
            "description": "Binds a transition end handler to an element's next transition end event.",
            "itemtype": "method",
            "name": "$.fn.nextTransitionEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/fx/Transition.js",
            "line": 210,
            "description": "Binds a transition end handler to an element's next transition end event.",
            "itemtype": "method",
            "name": "$.fn.nextTransitionEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handlers will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 35,
            "description": "Creates an application",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to execute when the application is initialized but not yet ready",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 49,
            "description": "The default URL that the app will navigate to",
            "itemtype": "property",
            "name": "initRoute",
            "default": "'/'",
            "type": "String",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 58,
            "description": "The default state object to supply the initial route",
            "itemtype": "property",
            "name": "initState",
            "default": "null",
            "type": "{Object}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 66,
            "description": "The default params object to supply the initial route",
            "itemtype": "property",
            "name": "initParams",
            "default": "null",
            "type": "{Object}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 75,
            "description": "The selector used to identify the DOM element that will contain views",
            "itemtype": "property",
            "name": "viewRootSelector",
            "default": "#view-root",
            "type": "{String}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 84,
            "description": "Handler for when the user attempts to navigate to an invalid route",
            "itemtype": "method",
            "name": "onInvalidRoute",
            "params": [
                {
                    "name": "err",
                    "description": "The routing error",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 97,
            "description": "Handler for when the user taps on a <A> element",
            "itemtype": "method",
            "name": "onTapLink",
            "params": [
                {
                    "name": "e",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 126,
            "description": "Makes an AJAX request if the user is online. If the user is offline, the returned\npromise will be rejected with the string argument \"offline\". (Alias for [[Lavaca.net.Connectivity]].ajax)",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "opts",
                    "description": "jQuery-style AJAX options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 137,
            "description": "Initializes the application",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "args",
                    "description": "Data of any type from a resolved promise returned by Application.beforeInit(). Defaults to null.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the application is ready for use",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 150,
            "description": "View manager used to transition between UI states",
            "itemtype": "property",
            "name": "viewManager",
            "default": "null",
            "type": "{Lavaca.mvc.ViewManager}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 158,
            "description": "Router used to manage application traffic and URLs",
            "itemtype": "property",
            "name": "router",
            "default": "null",
            "type": "{Lavaca.mvc.Router}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 194,
            "description": "Binds a global link handler",
            "itemtype": "method",
            "name": "bindLinkHandler",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 207,
            "description": "Gets initial route based on query string returned by server 302 redirect",
            "itemtype": "property",
            "name": "initialStandardRoute",
            "default": "null",
            "type": "{String}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Application.js",
            "line": 217,
            "description": "Handles asynchronous requests that need to happen before Application.init() is called in the constructor",
            "itemtype": "method",
            "name": "beforeInit",
            "type": "String",
            "params": [
                {
                    "name": "Config",
                    "description": "cache that's been initialized",
                    "type": "Lavaca.util.Config"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 90,
            "description": "The type of model object to use for items in this collection",
            "itemtype": "property",
            "name": "TModel",
            "default": "[[Lavaca.mvc.Model]]",
            "type": "Function",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 99,
            "description": "The name of the property containing the collection's items when using toObject()",
            "itemtype": "property",
            "name": "itemsProperty",
            "default": "'items'",
            "type": "String",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 107,
            "description": "Whether to allow duplicated IDs in collection items. If false, a later added item will overwrite the one with same ID.",
            "itemtype": "property",
            "name": "allowDuplicatedIds",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 115,
            "description": "Removes and disposes of all models in the collection",
            "itemtype": "method",
            "name": "clear",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 125,
            "description": "clears only the models in the collection",
            "itemtype": "method",
            "name": "clearModels",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 142,
            "description": "Readies data to be an item in the collection",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "data",
                    "description": "The model or object to be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The model derived from the data",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 165,
            "description": "Determines whether or not an attribute can be assigned",
            "itemtype": "method",
            "name": "canSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if you can assign to the attribute",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 175,
            "description": "Inserts one or more items into the collection at the specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "insertIndex",
                    "description": "index at which items will be inserted",
                    "type": "Number"
                },
                {
                    "name": "newItems",
                    "description": "Array of objects or Models to insert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "false if no items were able to be added, true otherwise.",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 183,
            "description": "Inserts one or more items into the collection at the specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "insertIndex",
                    "description": "index at which items will be inserted",
                    "type": "Number"
                },
                {
                    "name": "items",
                    "description": "One or more objects or Models to insert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false if no items were able to be added, true otherwise.",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 234,
            "description": "Adds one or more items to the collection. Items with IDs matching an item already in this collection will replace instead of add.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "One or more items to add to the collection",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if an item was added, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 241,
            "description": "Adds one or more items to the collection. Items with IDs matching an item already in this collection will replace instead of add.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "items",
                    "description": "An array of items to add to the collection",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "True if an item was added, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 255,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "model",
                    "description": "The model to move",
                    "type": "Lavaca.mvc.Model"
                },
                {
                    "name": "newIndex",
                    "description": "The new index at which the model should be placed",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 263,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "oldIndex",
                    "description": "The current index of the model",
                    "type": "Number"
                },
                {
                    "name": "newIndex",
                    "description": "The new index at which the model should be placed",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 286,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the model to remove",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 293,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "The models to remove from the collection",
                    "type": "Lavaca.mvc.Model"
                }
            ],
            "return": {
                "description": "True if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 300,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "One object containing attributes matching any models to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if at least one item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 307,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "N number of object arguments containing attributes matching any models to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of booleans indicating if at least one item was removed by matching each argument",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 314,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "items",
                    "description": "An array of objects containing attributes matching any models to remove",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of booleans indicating if at least one item was removed by matching each element in the array",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 320,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be removed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "True if at least one item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 383,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "The",
                    "description": "attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A list of this collection's models that matched the attributes",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 390,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                },
                {
                    "name": "maxResults",
                    "description": "The maximum number of results to return",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A list of this collection's models that matched the attributes",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 398,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    in the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A list of this collection's models that passed the test",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 408,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    in the result",
                    "type": "Function"
                },
                {
                    "name": "maxResults",
                    "description": "The maximum number of results to return",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A list of this collection's models that passed the test",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 445,
            "description": "Finds the first item matching an attribute hash",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The first model that matched the attributes (or null)",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 452,
            "description": "Finds the first item that passed a functional test",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    as the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The first model that passed the test (or null)",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 464,
            "description": "Finds the index of the first item matching an attribute hash",
            "itemtype": "method",
            "name": "indexOf",
            "sig": "Finds the index of the first item matching an attribute hash",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Index of the matching model, or -1 if no match is found",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 473,
            "description": "Finds the index of the first item that passed a functional test",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    as the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Index of the matching model, or -1 if no match is found",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 485,
            "description": "Gets the item at a specific index",
            "itemtype": "method",
            "name": "itemAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The model at that index",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 495,
            "description": "Gets the number of items in the collection",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of items in the collection",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 504,
            "description": "Executes a callback for each model in the collection. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(index, model)",
                    "type": "Function"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 511,
            "description": "Executes a callback for each model in the collection. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(index, model)",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the callback",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 529,
            "description": "Sorts the models in the collection using the specified attribute, in ascending order.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "attribute",
                    "description": "Attribute to sort by",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 536,
            "description": "Sorts the models in the collection using the specified attribute, in either ascending or descending order.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "attribute",
                    "description": "Attribute to sort by",
                    "type": "String"
                },
                {
                    "name": "descending",
                    "description": "Use descending sort. Defaults to false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 545,
            "description": "Sorts the models in the collection according to the specified compare function.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "compareFunction",
                    "description": "A function that compares two models. It should work\n    in the same manner as the default Array.sort method in javascript.  i.e. the function\n    should have a signature of function(modelA, modelB) and should return a negative integer\n    if modelA should come before modelB, a positive integer if modelB should come before modelA\n    and integer 0 if modelA and modelB are equivalent.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 576,
            "description": "Reverses the order of the models in the collection",
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 600,
            "description": "Handler invoked when an item in the collection has an event. Triggers an [[Lavaca.mvc.ItemEvent]].",
            "itemtype": "method",
            "name": "onItemEvent",
            "params": [
                {
                    "name": "e",
                    "description": "The item event",
                    "type": "Lavaca.mvc.ModelEvent"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 621,
            "description": "Processes the data received from a fetch request",
            "itemtype": "method",
            "name": "onFetchSuccess",
            "params": [
                {
                    "name": "response",
                    "description": "The response data",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 643,
            "description": "Saves the model to the server via POST",
            "itemtype": "method",
            "name": "saveToServer",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which to post the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 669,
            "description": "Converts this model to a key-value hash",
            "itemtype": "method",
            "name": "toObject",
            "params": [
                {
                    "name": "idOnly",
                    "description": "When true, only include item IDs for pre-existing items",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The key-value hash",
                "type": "Object"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Collection.js",
            "line": 687,
            "description": "Filters the raw response from onFetchSuccess() down to a custom object. (Meant to be overriden)",
            "itemtype": "method",
            "name": "responseFilter",
            "params": [
                {
                    "name": "response",
                    "description": "The raw response passed in onFetchSuccess()",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object or array to be applied to this collection instance",
                "type": "Object"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 28,
            "description": "The application's router",
            "itemtype": "property",
            "name": "router",
            "type": "Lavaca.mvc.Router",
            "default": "null",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 34,
            "description": "The application's view manager",
            "itemtype": "property",
            "name": "viewManager",
            "type": "Lavaca.mvc.ViewManager",
            "default": "null",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 40,
            "description": "Executes an action on this controller",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value arguments to pass to the action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 48,
            "description": "Executes an action on this controller",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value arguments to pass to the action",
                    "type": "Object"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 76,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The key under which to cache the view",
                    "type": "String"
                },
                {
                    "name": "TView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The data object to pass to the view",
                    "type": "Object"
                },
                {
                    "name": "layer",
                    "description": "The integer indicating what UI layer the view sits on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 89,
            "description": "Adds a state to the browser history",
            "itemtype": "method",
            "name": "history",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                },
                {
                    "name": "useReplace",
                    "description": "The bool to decide if to remove previous history",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 106,
            "description": "Convenience method for formatting URLs",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Format arguments to insert into the URL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The formatted URL",
                "type": "String"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 117,
            "description": "Directs the user to another route",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 125,
            "description": "Directs the user to another route",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Format arguments to insert into the URL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Controller.js",
            "line": 135,
            "description": "Readies the controller for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 71,
            "description": "The name of the event-causing attribute",
            "itemtype": "property",
            "name": "attribute",
            "type": "String",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 76,
            "description": "The value of the attribute before the event",
            "itemtype": "property",
            "name": "previous",
            "type": "Object",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 81,
            "description": "The value of the attribute after the event",
            "itemtype": "property",
            "name": "value",
            "type": "Object",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 86,
            "description": "A list of validation messages the change caused",
            "itemtype": "property",
            "name": "messages",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 127,
            "description": "When true, attributes are not validated",
            "itemtype": "property",
            "name": "suppressValidation",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 136,
            "description": "When true, changes to attributes are not tracked",
            "itemtype": "property",
            "name": "suppressTracking",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 145,
            "description": "Gets the value of a attribute",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the attribute, or null if there is no value",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 161,
            "description": "Determines whether or not an attribute can be assigned",
            "itemtype": "method",
            "name": "canSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if you can assign to the attribute",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 171,
            "description": "Sets the value of the attribute, if it passes validation",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if attribute was set, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 180,
            "description": "Sets the value of the attribute, if it passes validation",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object"
                },
                {
                    "name": "flag",
                    "description": "A metadata flag describing the attribute",
                    "type": "String"
                },
                {
                    "name": "suppress",
                    "description": "When true, validation, events and tracking are suppressed",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "True if attribute was set, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 220,
            "description": "Determines whether or not this model has a named attribute",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the attribute exists and has a value",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 230,
            "description": "The name of the ID attribute",
            "itemtype": "property",
            "name": "id",
            "default": "'id'",
            "type": "String",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 239,
            "description": "Gets the ID of the model",
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "The ID of the model",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 248,
            "description": "Determines whether or not this model has been saved before",
            "itemtype": "method",
            "name": "isNew",
            "return": {
                "description": "True when the model has no ID associated with it",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 257,
            "description": "Ensures that a map is suitable to be applied to this model",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value hash to parse",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The parsed version of the map",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 270,
            "description": "Sets each attribute of this model according to the map",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value map to parse and apply",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 276,
            "description": "Sets each attribute of this model according to the map",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value map to parse and apply",
                    "type": "Object"
                },
                {
                    "name": "suppress",
                    "description": "When true, validation, events and tracking are suppressed",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 291,
            "description": "Removes all data from the model or removes selected flag from model.",
            "itemtype": "method",
            "name": "clear",
            "sig": "Removes all flagged data from the model",
            "params": [
                {
                    "name": "flag",
                    "description": "The metadata flag describing the data to remove",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 321,
            "description": "Makes a copy of this model",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The copy",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 330,
            "description": "Adds a validation rule to this model",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute to which the rule applies",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to use to validate the attribute, in the\n  form callback(attribute, value)",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "A text message used when a value fails the test",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 342,
            "description": "Validates all attributes on the model",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "A map of attribute names to validation error messages",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 348,
            "description": "Runs validation tests for a specific attribute",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "The",
                    "description": "name of the attribute to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of validation error messages",
                "type": "Array"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 355,
            "description": "Runs validation against a potential value for a attribute",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The potential value for the attribute",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A list of validation error messages",
                "type": "Array"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 387,
            "description": "Processes the data received from a fetch request",
            "itemtype": "method",
            "name": "onFetchSuccess",
            "params": [
                {
                    "name": "response",
                    "description": "The response data",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 401,
            "description": "Triggered when the model is unable to fetch data",
            "itemtype": "method",
            "name": "onFetchError",
            "params": [
                {
                    "name": "value",
                    "description": "The error value",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 410,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "event",
            "name": "fetchError",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 417,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "url",
                    "description": "The URL from which to load the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 424,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "options",
                    "description": "jQuery AJAX settings. If url property is missing, fetch() will try to use the url property on this model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 431,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "url",
                    "description": "The URL from which to load the data",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "jQuery AJAX settings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 451,
            "description": "Converts a relative path to an absolute api url based on environment config 'apiRoot'",
            "itemtype": "method",
            "name": "getApiURL",
            "params": [
                {
                    "name": "relPath",
                    "description": "A relative path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A formated api url or an apparently bad url '/please_set_model_url' if relPath argument is faslsy",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 468,
            "description": "Saves the model",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "A function callback(model, changedAttributes, attributes)\n  that returns either a promise or a truthy value\n  indicating whether the operation failed or succeeded",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 478,
            "description": "Saves the model",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "A function callback(model, changedAttributes, attributes)\n  that returns either a promise or a truthy value\n  indicating whether the operation failed or succeeded",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context for the callback",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 524,
            "description": "Saves the model to the server via POST",
            "itemtype": "method",
            "name": "saveToServer",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which to post the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 550,
            "description": "Converts this model to a key-value hash",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The key-value hash",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 569,
            "description": "Converts this model to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON string representing the model",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 578,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 587,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "An attribute to which to limit the scope of events",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 596,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 604,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "An attribute to which to limit the scope of events",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 628,
            "description": "Filters the raw response from onFetchSuccess() down to a custom object. (Meant to be overriden)",
            "itemtype": "method",
            "name": "responseFilter",
            "params": [
                {
                    "name": "response",
                    "description": "The raw response passed in onFetchSuccess()",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object to be applied to this model instance",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 639,
            "field": "{String} SENSITIVE",
            "static": 1,
            "default": "'sensitive'\nFlag indicating that data is sensitive",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Model.js",
            "line": 646,
            "field": "{String} DO_NOT_COMPUTE",
            "static": 1,
            "default": "'do_not_compute'\nFlag indicating that the selected attribute should not be executed\nas a computed property and should instead just return the function.",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/www/js/lavaca/mvc/Route.js",
            "line": 88,
            "description": "Tests if this route applies to a URL",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True when this route matches the URL",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/www/js/lavaca/mvc/Route.js",
            "line": 98,
            "description": "Converts a URL into a params object according to this route's pattern",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The params object",
                "type": "Object"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/www/js/lavaca/mvc/Route.js",
            "line": 149,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/www/js/lavaca/mvc/Route.js",
            "line": 158,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/www/js/lavaca/mvc/Route.js",
            "line": 168,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the controller action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 18,
            "field": "{Array} routes",
            "default": "[]\nThe [[Lavaca.mvc.Route]]s used by this router",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 24,
            "field": "{Lavaca.mvc.ViewManager} viewManager",
            "default": "null\nThe view manager used by this router",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 32,
            "field": "{Boolean} locked",
            "default": "false\nWhen true, the router is prevented from executing a route",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 38,
            "field": "{Boolean} hasNavigated",
            "default": "false\nWhether or not this router has been used to navigate",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 56,
            "description": "Sets the viewManager property on the instance which is the view manager used by this router",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "viewManager",
                    "description": "",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ],
            "return": {
                "description": "This Router instance",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 67,
            "description": "Adds multiple routes",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "map",
                    "description": "A hash in the form {pattern: [TController, action, params]}\n  or {pattern: {controller: TController, action: action, params: params}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 75,
            "description": "Adds a route",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller to perform the action (should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 84,
            "description": "Adds a route",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller to perform the action (should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value pairs that will be passed to the action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 114,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 121,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 129,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 168,
            "description": "Unlocks the router so that it can be used again",
            "itemtype": "method",
            "name": "unlock",
            "return": {
                "description": "This router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/Router.js",
            "line": 178,
            "description": "Readies the router for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 36,
            "description": "The model used by the view",
            "itemtype": "property",
            "name": "model",
            "default": "null",
            "optional": 1,
            "type": "lavaca.mvc.Model",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 46,
            "description": "The element containing the view",
            "itemtype": "property",
            "name": "shell",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 54,
            "description": "An id is applied to a data property on the views container",
            "itemtype": "property",
            "name": "id",
            "default": "generated from className and unique identifier",
            "type": "String",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 64,
            "description": "If the view is created in the context of a childView, the parent view is assigned to this view",
            "itemtype": "property",
            "name": "parentView",
            "default": "null",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 77,
            "description": "The element that is either assigned to the view if in the context of a childView, or is created for the View\nif it is a PageView",
            "itemtype": "property",
            "name": "el",
            "default": "null",
            "type": "Object | String",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 88,
            "description": "A dictionary of selectors and event types in the form\n{eventType: {delegate: 'xyz', callback: func}}@property el",
            "itemtype": "property",
            "name": "eventMap",
            "default": "{}",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 96,
            "description": "A dictionary of selectors, View types and models in the form\n  {selector: {TView: TView, model: model}}}",
            "itemtype": "property",
            "name": "childViewMap",
            "type": "Object",
            "default": "{}",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 105,
            "description": "Interactive elements used by the view",
            "itemtype": "property",
            "name": "childViews",
            "default": "lavaca.util.cache",
            "type": "lavaca.util.Cache",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 112,
            "description": "A dictionary of selectors and widget types in the form\n  {selector: widgetType}",
            "itemtype": "property",
            "name": "widgetMap",
            "type": "Object",
            "default": "{}",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 120,
            "description": "Interactive elements used by the view",
            "itemtype": "property",
            "name": "widgets",
            "default": "lavaca.util.Cache",
            "type": "lavaca.util.Cache",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 127,
            "description": "A map of all the events to be applied to child Views in the form of\n{type: {TView: TView, callback : callback}}",
            "itemtype": "property",
            "name": "childViewEventMap",
            "default": "Object",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 144,
            "description": "Will render any childViews automatically when set to true",
            "itemtype": "property",
            "name": "autoRender",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 152,
            "description": "The name of the template associated with the view",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 159,
            "description": "A class name added to the view container",
            "itemtype": "property",
            "name": "String className",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 168,
            "description": "The index of the layer on which the view sits",
            "itemtype": "property",
            "name": "layer",
            "type": "Number",
            "default": "0",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 175,
            "description": "Type of view, ex PageView, View",
            "itemtype": "property",
            "name": "String viewType",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 193,
            "description": "Fired when there was an error during rendering process",
            "itemtype": "event",
            "name": "rendererror",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 216,
            "description": "Renders the view using its template and model",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 239,
            "description": "Renders the view using its template and model",
            "itemtype": "method",
            "name": "renderPageView",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 269,
            "description": "Re-renders the view's template and replaces the DOM nodes that match\nthe selector argument. If no selector argument is provided, the whole view\nwill be re-rendered. If the first parameter is passed as <code>false</code>\nthe resulting html will pe passed with the promise and nothing will be replaced.\nNote: the number of elements that match the provided selector must be identical\nin the current markup and in the newly rendered markup or else the returned\npromise will be rejected.\nRe-renders the view's template using the view's model\nand redraws the entire view",
            "itemtype": "method",
            "name": "redraw",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 283,
            "description": "Re-renders the view's template using the specified model\nand redraws the entire view",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 290,
            "description": "Re-renders the view's template using the view's model and only redraws the\nelements that match the specified selector string.\nNote: The numbers of items that match the selector must\nbe exactly the same in the view's current markup and in the newly rendered\nmarkup. If that is not the case, the returned promise will be rejected and\nnothing will be redrawn.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector string that defines elements to redraw",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 301,
            "description": "Re-renders the view's template using the specified model and only redraws the\nelements that match the specified selector string.\nNote: The numbers of items that match the selector must\nbe exactly the same in the view's current markup and in the newly rendered\nmarkup. If that is not the case, the returned promise will be rejected and\nnothing will be redrawn.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector string that defines elements that will be updated",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 313,
            "description": "Re-renders the view's template using the view's model. If shouldRedraw is true,\nthe entire view will be redrawn. If shouldRedraw is false, nothing will be redrawn,\nbut the returned promise will be resolved with the newly rendered content. This allows\nthe caller to attach a success handler to the returned promise and define their own\nredrawing behavior.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "shouldRedraw",
                    "description": "Whether the view should be automatically redrawn.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 323,
            "description": "Re-renders the view's template using the specified model. If shouldRedraw is true,\nthe entire view will be redrawn. If shouldRedraw is false, nothing will be redrawn,\nbut the returned promise will be resolved with the newly rendered content. This allows\nthe caller to attach a success handler to the returned promise and define their own\nredrawing behavior.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "shouldRedraw",
                    "description": "Whether the view should be automatically redrawn.",
                    "type": "Boolean"
                },
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 404,
            "description": "Dispose old widgets and child views",
            "itemtype": "method",
            "name": "disposeChildViews",
            "params": [
                {
                    "name": "$el",
                    "description": "the $el to search for child views and widgets in",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 427,
            "description": "Dispose old widgets and child views",
            "itemtype": "method",
            "name": "disposeWidgets",
            "params": [
                {
                    "name": "$el",
                    "description": "the $el to search for child views and widgets in",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 448,
            "description": "Unbinds events from the model",
            "itemtype": "method",
            "name": "clearModelEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 474,
            "description": "Checks for strings in the event map to bind events to this automatically",
            "itemtype": "method",
            "name": "bindMappedEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 491,
            "description": "Binds events to the view",
            "itemtype": "method",
            "name": "applyEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 547,
            "description": "Maps multiple delegated events for the view",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of the delegates, event types, and handlers\n    that will be bound when the view is rendered. The map should be in\n    the form <code>{delegate: {eventType: callback}}</code>. For example,\n    <code>{'.button': {click: onClickButton}}</code>. The events defined in\n    [[Lavaca.fx.Animation]] and [[Lavaca.fx.Transition]] are also supported.\n    To map an event to the view's el, use 'self' as the delegate. To map\n    events to the view's model, use 'model' as the delegate. To limit events\n    to only a particular property on the model, use a period-seperated\n    syntax such as <code>{model: {'change.myproperty': myCallback}}</code>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 562,
            "description": "Maps an event for the view",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "delegate",
                    "description": "The element to which to delegate the event",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The event handler",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 588,
            "description": "Initializes widgets on the view",
            "itemtype": "method",
            "name": "createWidgets",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 636,
            "description": "Assigns multiple widget types to elements on the view",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors to bind widgets to when the view is rendered.\n    The map should be in the form {selector: [[Lavaca.ui.Widget]]} or\n    {selector: {TWidget: [[Lavaca.ui.Widget]], args: [optional arguments to pass to widget constructor]}}.\n    For example, {'form': Lavaca.ui.Form} or {'form': {TWidget: Lavaca.ui.Form, args: [...]}}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 646,
            "description": "Assigns a widget type to be created for elements matching a selector when the view is rendered",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector for the root element of the widget",
                    "type": "String"
                },
                {
                    "name": "TWidget",
                    "description": "The [[Lavaca.ui.Widget]]-derived type of widget to create",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 653,
            "description": "Assigns a widget type to be created for elements matching a selector when the view is rendered, and\naccepts optional arguments to pass to the widget constructor",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector for the root element of the widget",
                    "type": "String"
                },
                {
                    "name": "widgetOptions",
                    "description": "An object with a 'TWidget' key and an optional 'args' key which can be\n    an array of arguments to pass to the widget's constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 673,
            "description": "Initializes child views on the view, called from onRenderSuccess",
            "itemtype": "method",
            "name": "createChildViews",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 696,
            "description": "Assigns multiple Views to elements on the view",
            "itemtype": "method",
            "name": "mapChildView",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors to view types and models to be bound when the view is rendered.\n    The map should be in the form {selector: {TView : TView, model : lavaca.mvc.Model}}. For example, {'form': {TView : lavaca.mvc.ExampleView, model : lavaca.mvc.Model}}",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "The selector for the root element of the View",
                    "type": "String"
                },
                {
                    "name": "TView",
                    "description": "The [[Lavaca.mvc.View]]-derived type of view to create",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The [[Lavaca.mvc.Model]]-derived model instance to use in the child view",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 722,
            "description": "Listen for events triggered from child views.",
            "itemtype": "method",
            "name": "mapChildViewEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to listen for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The method to execute when this event type has occured",
                    "type": "Function"
                },
                {
                    "name": "TView",
                    "description": "(Optional) Only listen on child views of this type",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 730,
            "description": "Maps multiple child event types",
            "itemtype": "method",
            "name": "mapChildViewEvent",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of event types with callbacks and TView's associated with that type\n The map should be in the form {type : {callback : {Function}, TView : TView}}",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 752,
            "description": "Called from onRenderSuccess of the view, adds listeners to all childviews if present",
            "itemtype": "method",
            "name": "applyChildViewEvent",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 778,
            "description": "Executes when the template renders successfully",
            "itemtype": "method",
            "name": "onRenderSuccess",
            "params": [
                {
                    "name": "e",
                    "description": "The render event. This object should have a string property named \"html\"\n  that contains the template's rendered HTML output.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 796,
            "description": "Executes when the template fails to render",
            "itemtype": "method",
            "name": "onRenderError",
            "params": [
                {
                    "name": "e",
                    "description": "The error event. This object should have a string property named \"err\"\n  that contains the error message.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 806,
            "description": "Readies the view for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 832,
            "description": "Creates the view's wrapper element",
            "itemtype": "method",
            "name": "wrapper",
            "return": {
                "description": "The wrapper element",
                "type": "JQuery"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 840,
            "description": "Creates the view's interior content wrapper element",
            "itemtype": "method",
            "name": "interior",
            "return": {
                "description": "The interior content wrapper element",
                "type": "JQuery"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 850,
            "description": "Adds this view to a container",
            "itemtype": "method",
            "name": "insertInto",
            "params": [
                {
                    "name": "container",
                    "description": "The containing element",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 871,
            "description": "Executes when the user navigates to this view",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "exitingViews",
                    "description": "The views that are exiting as this one enters",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 894,
            "description": "Fired when there was an error during rendering process",
            "itemtype": "event",
            "name": "rendererror",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 902,
            "description": "Executes when the user navigates away from this view",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "enteringViews",
                    "description": "The views that are entering as this one exits",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/View.js",
            "line": 915,
            "description": "Fired when there was an error during rendering process",
            "itemtype": "event",
            "name": "rendererror",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 22,
            "description": "The element that contains all view layers",
            "itemtype": "property",
            "name": "el",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 28,
            "description": "A cache containing all views",
            "itemtype": "property",
            "name": "views",
            "type": "Lavaca.util.Cache",
            "default": "new Lavaca.util.Cache()",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 34,
            "description": "A list containing all layers",
            "itemtype": "property",
            "name": "layers",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 40,
            "description": "A list containing all views that are currently exiting",
            "itemtype": "property",
            "name": "exitingPageViews",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 46,
            "description": "A list containing all views that are currently entering",
            "itemtype": "property",
            "name": "enteringPageViews",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 53,
            "description": "When true, the view manager is prevented from loading views.",
            "itemtype": "property",
            "name": "locked",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 59,
            "description": "Sets the el property on the instance",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "el",
                    "description": "A jQuery object of the element that contains all layers",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "This View Manager instance",
                "type": "Lavaca.mvc.ViewManager"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 66,
            "description": "Sets the el property on the instance",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "el",
                    "description": "A CSS selector matching the element that contains all layers",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This View Manager instance",
                "type": "Lavaca.mvc.ViewManager"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 77,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The cache key associated with the view",
                    "type": "String"
                },
                {
                    "name": "TPageView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The views model",
                    "type": "Object"
                },
                {
                    "name": "layer",
                    "description": "The index of the layer on which the view will sit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 87,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The cache key associated with the view",
                    "type": "String"
                },
                {
                    "name": "TPageView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The views model",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters to be mapped to the view",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 154,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the layer to remove",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 160,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "el",
                    "description": "An element on the layer to remove (or the layer itself)",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 166,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "view",
                    "description": "The view on the layer to remove",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 189,
            "description": "Removes all layers above a given index",
            "itemtype": "method",
            "name": "dismissLayersAbove",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which to clear",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 196,
            "description": "Removes all layers above a given index",
            "itemtype": "method",
            "name": "dismissLayersAbove",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which to clear",
                    "type": "Number"
                },
                {
                    "name": "exceptForView",
                    "description": "A view that should not be dismissed",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 233,
            "description": "Empties the view cache",
            "itemtype": "method",
            "name": "flush",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/mvc/ViewManager.js",
            "line": 254,
            "description": "Readies the view manager for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/www/js/lavaca/net/Connectivity.js",
            "line": 32,
            "description": "Attempts to detect whether or not the browser is connected",
            "itemtype": "method",
            "name": "isOffline",
            "static": 1,
            "return": {
                "description": "True if the browser is offline; false if the browser is online\n   or if connection status cannot be determined",
                "type": "Boolean"
            },
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/www/js/lavaca/net/Connectivity.js",
            "line": 49,
            "description": "Makes an AJAX request if the user is online. If the user is offline, the returned\npromise will be rejected with the string argument \"offline\"",
            "itemtype": "method",
            "name": "ajax",
            "static": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "jQuery-style AJAX options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/www/js/lavaca/net/Connectivity.js",
            "line": 83,
            "description": "Adds a callback to be executed whenever any Lavaca.net.Connectivity.ajax() call is\nblocked as a result of a lack of internet connection.",
            "itemtype": "method",
            "name": "registerOfflineAjaxHandler",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 38,
            "description": "A list containing history states generated by the app (not used for HTML5 history)",
            "itemtype": "property",
            "name": "sequence",
            "type": "Array",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 43,
            "description": "The current index in the history sequence (not used for HTML5 history)",
            "itemtype": "property",
            "name": "position",
            "type": "Number",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 51,
            "description": "Auto-generated callback executed when a history event occurs",
            "itemtype": "property",
            "name": "onPopState",
            "type": "Function",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 116,
            "description": "Retrieve the current history record",
            "itemtype": "method",
            "name": "current",
            "return": {
                "description": "The current history record",
                "type": "Object"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 125,
            "description": "Determines whether or not there are history states",
            "itemtype": "method",
            "name": "hasHistory",
            "return": {
                "description": "True when there is a history state",
                "type": "Boolean"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 134,
            "description": "Adds a record to the history",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 156,
            "description": "Replaces the current record in the history",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 176,
            "description": "Unbind the history object and ready it for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 193,
            "description": "Initialize a singleton history abstraction layer",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "return": {
                "description": "The history instance",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 200,
            "description": "Initialize a singleton history abstraction layer",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "useHash",
                    "description": "When true, use the location hash to manage history state instead of HTML5 history",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The history instance",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 217,
            "description": "Adds a record to the history",
            "itemtype": "method",
            "name": "push",
            "static": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 229,
            "description": "Replaces the current record in the history",
            "itemtype": "method",
            "name": "replace",
            "static": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 241,
            "description": "Goes to the previous history state",
            "itemtype": "method",
            "name": "back",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 249,
            "description": "Goes to the next history state",
            "itemtype": "method",
            "name": "forward",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 257,
            "description": "Unbind the history object and ready it for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 268,
            "description": "Binds an event handler to the singleton history",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The history object (for chaining)",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 280,
            "description": "Unbinds an event handler from the singleton history",
            "itemtype": "method",
            "name": "off",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to stop executing when the\n   event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The history object (for chaining)",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 293,
            "description": "Sets Histroy to hash mode",
            "itemtype": "method",
            "name": "overrideStandardsMode",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 302,
            "description": "Stores the page transition animations so that if you route back, it will animate correctly",
            "itemtype": "property",
            "name": "animationBreadcrumb",
            "type": "Array",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/net/History.js",
            "line": 308,
            "description": "Flag to notify when history back is being called",
            "itemtype": "property",
            "name": "isRoutingBack",
            "type": "Boolean",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 35,
            "description": "A list of keys found in the store",
            "field": "{Array} manifest",
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 41,
            "description": "Generates a storage key",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the item for which to generate a key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The key",
                "type": "String"
            },
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 51,
            "description": "Retrieves an object from storage, given its ID",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the stored object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object",
                "type": "Object"
            },
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 71,
            "description": "Stores an object locally",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to store",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store",
                    "type": "Object"
                }
            ],
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 83,
            "description": "Removes an object from storage",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to remove from storage",
                    "type": "String"
                }
            ],
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/www/js/lavaca/storage/LocalStore.js",
            "line": 94,
            "description": "Retrieves all items in this store",
            "itemtype": "method",
            "name": "all",
            "return": {
                "description": "A list of stored objects",
                "type": "Array"
            },
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/www/js/lavaca/storage/Store.js",
            "line": 15,
            "description": "The ID of the store",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/www/js/lavaca/storage/Store.js",
            "line": 21,
            "description": "Retrieves an object from storage, given its ID",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the stored object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object",
                "type": "Object"
            },
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/www/js/lavaca/storage/Store.js",
            "line": 31,
            "description": "Stores an object locally",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to store",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store",
                    "type": "Object"
                }
            ],
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/www/js/lavaca/storage/Store.js",
            "line": 41,
            "description": "Removes an object from storage",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to remove from storage",
                    "type": "String"
                }
            ],
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/www/js/lavaca/storage/Store.js",
            "line": 50,
            "description": "Retrieves all items in this store",
            "itemtype": "method",
            "name": "all",
            "return": {
                "description": "A list of stored objects",
                "type": "Array"
            },
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 32,
            "description": "Gets the basis for the template helper object",
            "itemtype": "method",
            "name": "prepareHelpers",
            "return": {
                "description": "A map of helper function names to functions",
                "type": "Object"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 45,
            "description": "Helper function, exposed in dust templates, that uses\n  [Lavaca.util.Translation] to get localized strings.\nAccessed as:\n\n<dl>\n\n<dt>{@msg key=\"code\"/}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n\n<dt>{@msg key=\"code\"}default{/msg}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n  <dd>default&mdash;The default markup to display if no translation\n      is found</dd>\n\n\n<dt>{@msg key=\"code\" locale=\"en_US\"/}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n  <dd>locale&mdash;The locale from which to get the message (\"en_US\")</dd>\n\n<dt>{@msg key=\"code\" p0=\"first\" p1=variable /}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n  <dd>p0, p1, &hellip; pN&mdash;String format parameters for the message\n      (See [[Lavaca.util.StringUtils]].format())</dd>\n\n</dl>",
            "itemtype": "method",
            "name": "helperMsg",
            "params": [
                {
                    "name": "chunk",
                    "description": "Dust chunk",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Dust context",
                    "type": "Object"
                },
                {
                    "name": "bodies",
                    "description": "Dust bodies",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters passed to the helper",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Rendered output",
                "type": "String"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 97,
            "description": "Helper function, exposed in dust templates, that uses\n  [[Lavaca.ui.Template]] to include other templates. Accessed as:\n\n<dl>\n\n<dt>{@include name=\"template-name\"/}</dt>\n  <dd>name&mdash;The name under which the template can be referenced</dd>\n\n</dl>\n\n<strong>Note:</strong> You should always use the include helper instead of\nthe dust.js partial syntax. The dust.js partial syntax may not work as expected.",
            "itemtype": "method",
            "name": "helperInclude",
            "params": [
                {
                    "name": "chunk",
                    "description": "Dust chunk",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Dust context",
                    "type": "Object"
                },
                {
                    "name": "bodies",
                    "description": "Dust bodies",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters passed to the helper",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Rendered output",
                "type": "String"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 133,
            "description": "Helper function, exposed in dust templates, that allows templates\n  to use data from [[Lavaca.util.Config]]. Accessed as:\n\n<dl>\n\n<dt>{@config key=\"config_value\"/}</dt>\n  <dd>key&mdash;The key to read from the config file for the default environment.</dd>\n\n<dt>{@config key=\"config_value\" environment=\"production\"/}</dt>\n  <dd>key&mdash;The key to read from the config file for the specified environment.</dd>\n\n<dt>{@config key=\"config_value\"}default{/config}</dt>\n  <dd>key&mdash;The key to read from the config file</dd>\n  <dd>default&mdash;The default markup to display if the key\n      is not found</dd>\n\n<dt>{@config key=\"config_value\" p0=\"first\" p1=variable /}</dt>\n  <dd>key&mdash;The key to read from the config file</dd>\n  <dd>p0, p1, &hellip; pN&mdash;String format parameters\n      (See [[Lavaca.util.StringUtils]].format())</dd>\n\n</dl>\n\n<dt>{@config only=\"local\"}&hellip;{:else}&hellip;{/config}</dt>\n  <dd>only&mdash;Only render the body content if the current config environment's name matches this key</dd>\n\n</dl>\n\n<dt>{@config not=\"production\"}&hellip;{:else}&hellip;{/config}</dt>\n  <dd>not&mdash;Only render the body content if the current config environment's name does NOT match this key</dd>\n\n</dl>",
            "itemtype": "method",
            "name": "helperConfig",
            "params": [
                {
                    "name": "chunk",
                    "description": "Dust chunk",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Dust context",
                    "type": "Object"
                },
                {
                    "name": "bodies",
                    "description": "Dust bodies",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters passed to the helper",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Rendered output",
                "type": "String"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 199,
            "description": "Compiles the template",
            "itemtype": "method",
            "name": "compile",
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 207,
            "description": "Renders the template to a string.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to provide to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/DustTemplate.js",
            "line": 232,
            "description": "Makes this template ready for disposals",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 70,
            "description": "Event handler for when the form is submitted",
            "itemtype": "method",
            "name": "onSubmit",
            "params": [
                {
                    "name": "e",
                    "description": "The submit event",
                    "type": "Event"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 82,
            "description": "Event handler for when the user attempts to submit a valid form",
            "itemtype": "method",
            "name": "onSubmitSuccess",
            "params": [
                {
                    "name": "values",
                    "description": "Key-value map of the form's input names and values",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 91,
            "description": "Event handler for when the user attempts to submit an invalid form",
            "itemtype": "method",
            "name": "onSubmitError",
            "params": [
                {
                    "name": "invalidInputs",
                    "description": "A key-value map of all invalid inputs",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 100,
            "description": "Event handler for when an input on the form changes",
            "itemtype": "method",
            "name": "onChangeInput",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "Event"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 116,
            "description": "Event handler for when an attribute on the bound model changes",
            "itemtype": "method",
            "name": "onChangeModel",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "Event"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 127,
            "description": "Binds this form to a model, forcing the two to stay in sync",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "model",
                    "description": "The model being bound",
                    "type": "Lavaca.mvc.Model"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 139,
            "description": "Unbinds this form from its model",
            "itemtype": "method",
            "name": "unbind",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 150,
            "description": "Retrieve an input from the form with a given name",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The input",
                "type": "JQuery"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 160,
            "description": "Gets the value of an input on the form",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the input",
                "type": "String"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 170,
            "description": "Sets an input on the form's value",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the input",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value of the input",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 180,
            "description": "The default validation rules for the form",
            "itemtype": "method",
            "name": "defaultRules",
            "return": {
                "description": "The form's default rules1",
                "type": "Object"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 196,
            "description": "Adds multiple validation rules to this form",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors and callbacks to add as rules",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 202,
            "description": "Adds multiple validation rules to this form",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "selector",
                    "description": "A jQuery selector associated with the rule",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function that tests the value of inputs matching the\n  selector in the form callback(value, input, form) and\n  return a string message if validation fails",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 222,
            "description": "Collects all input values on the form",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "A hash of input names and their values",
                "type": "Object"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 256,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 261,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "succcess",
                    "description": "A callback to execute when the form is valid",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A callback to execute when the form is invalid",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 268,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "input",
                    "description": "An input to check",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 274,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "succcess",
                    "description": "A callback to execute when the input is valid",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A callback to execute when the input is invalid",
                    "type": "Function"
                },
                {
                    "name": "input",
                    "description": "An input to check",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 352,
            "description": "Ready the form for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/Form.js",
            "line": 361,
            "description": "Extends the form with new submit handlers",
            "itemtype": "method",
            "name": "withSubmit",
            "static": 1,
            "params": [
                {
                    "name": "success",
                    "description": "The success handler",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "The error handler",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new [@Lavaca.ui.Form]-derived type",
                "type": "Function"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "line": 15,
            "description": "Class name applied to the root",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "'loading'",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "line": 21,
            "description": "Activates the loading indicator",
            "itemtype": "method",
            "name": "show",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "line": 28,
            "description": "Deactivates the loading indicator",
            "itemtype": "method",
            "name": "hide",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "line": 36,
            "description": "Creates a loading indicator and binds it to the document's AJAX events",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/www/js/lavaca/ui/LoadingIndicator.js",
            "line": 41,
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "TLoadingIndicator",
                    "description": "The type of loading indicator to create (should derive from [[Lavaca.ui.LoadingIndicator]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 48,
            "description": "True when overflowScrolling is supported in the Browser",
            "itemtype": "property",
            "name": "supportsOverflow",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 54,
            "description": "Activates the loading indicator",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "'overflow-scroll'",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 60,
            "description": "iScroll options hash",
            "itemtype": "property",
            "name": "iScrollOptions",
            "type": "Object",
            "default": "null",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 66,
            "description": "Creates a wrapper for iScroll's scrolling content",
            "itemtype": "method",
            "name": "wrapper",
            "return": {
                "description": "The wrapper element",
                "type": "JQuery"
            },
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 75,
            "description": "Initializes native overflow scrolling",
            "itemtype": "method",
            "name": "createOverflowScroll",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 85,
            "description": "Instantiates iScroll",
            "itemtype": "method",
            "name": "createOverflowScroll",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 118,
            "description": "Delegates to public iScroll method with delay.\nMust be called every time content changes inside of scrolling container.",
            "itemtype": "method",
            "name": "refresh",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 135,
            "description": "Prevents a page from scrolling when overflow container reaches boundries\n\nBased on ScrollFix v0.1\nhttp://www.joelambert.co.uk\n\nCopyright 2011, Joe Lambert.\nFree to use under the MIT license.\nhttp://www.opensource.org/licenses/mit-license.php",
            "itemtype": "method",
            "name": "preventParentScroll",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Scrollable.js",
            "line": 171,
            "description": "Cleans up the widget",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.ui.Scrollable"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 15,
            "description": "Compiles the template",
            "itemtype": "method",
            "name": "compile",
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 22,
            "description": "Renders the template to a string",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to provide to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 32,
            "description": "Parses server data to include in this lookup",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "text",
                    "description": "The server data string",
                    "type": "String"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 42,
            "description": "Finds the template with a given name",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the template",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The template (or null if no such template exists)",
                "type": "Lavaca.ui.Template"
            },
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 53,
            "description": "Scans the document for all templates with registered types and\n  prepares template objects from them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 59,
            "description": "Scans the document for all templates with registered types and\n   prepares template objects from them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 92,
            "description": "Disposes of all templates",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 100,
            "description": "Finds the named template and renders it to a string",
            "itemtype": "method",
            "name": "render",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the template",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to provide to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 117,
            "description": "Registers a type of template to look for on intilization.",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "mimeType",
                    "description": "The mime-type associated with the template",
                    "type": "String"
                },
                {
                    "name": "TTemplate",
                    "description": "The JavaScript type used for the template (should derive from [[Lavaca.ui.Template]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Template.js",
            "line": 124,
            "description": "Registers a type of template to look for on intilization.",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "TTemplate",
                    "description": "The JavaScript type used for the template (should derive from [[Lavaca.ui.Template]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/www/js/lavaca/ui/Widget.js",
            "line": 18,
            "description": "The DOM element that is the root of the widget",
            "itemtype": "property",
            "name": "el",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.ui.Widget"
        },
        {
            "file": "src/www/js/lavaca/ui/Widget.js",
            "line": 28,
            "description": "The el's ID",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "default": "(Autogenerated)",
            "class": "lavaca.ui.Widget"
        },
        {
            "file": "src/www/js/lavaca/util/ArrayUtils.js",
            "line": 9,
            "description": "Gets the first index of an item in an array",
            "itemtype": "method",
            "name": "indexOf",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to look for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The first index of the object, or -1 if not found",
                "type": "Number"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/www/js/lavaca/util/ArrayUtils.js",
            "line": 33,
            "description": "Determines whether an array contains an object",
            "itemtype": "method",
            "name": "contains",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to look for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True when the array contains the object, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/www/js/lavaca/util/ArrayUtils.js",
            "line": 46,
            "description": "Removes the first instance of an item from an array, if it exists",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The former index of the item (or -1 if the item was not\n  in the array)",
                "type": "Number"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/www/js/lavaca/util/ArrayUtils.js",
            "line": 64,
            "description": "Adds an item to the end of an array, if it was not already in the array",
            "itemtype": "method",
            "name": "pushIfNotExists",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to add to the array",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The index of the item in the array",
                "type": "Number"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/www/js/lavaca/util/ArrayUtils.js",
            "line": 80,
            "description": "Determines if object is an array",
            "itemtype": "method",
            "name": "isArray",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "Any value of any type",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if a is a true array",
                "type": "Boolean"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 12,
            "description": "Retrieves an item from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored item (or null if no item is stored)",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 19,
            "description": "Retrieves an item from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                },
                {
                    "name": "def",
                    "description": "A default value that will be added, if there is no item stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The stored item (or null if no item is stored and no default)",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 33,
            "description": "Assigns an item to a key in the cache",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item will be stored",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object to store in the cache",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 43,
            "description": "Adds an item to the cache",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "The object to store in the cache",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The auto-generated ID under which the value was stored",
                "type": "String"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 55,
            "description": "Removes an item from the cache (if it exists)",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 64,
            "description": "Executes a callback for each cached item. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(key, item)",
                    "type": "Function"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 70,
            "description": "Executes a callback for each cached item. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(key, item)",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the callback",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 88,
            "description": "Serializes the cache to a hash",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The resulting key-value hash",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 101,
            "description": "Serializes the cache to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON string",
                "type": "String"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 110,
            "description": "Serializes the cache to an array",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "The resulting array with elements being index based and keys stored in an array on the 'ids' property",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 126,
            "description": "removes all items from the cache",
            "itemtype": "method",
            "name": "clear",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 136,
            "description": "returns number of items in cache",
            "itemtype": "method",
            "name": "count",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Cache.js",
            "line": 148,
            "description": "Clears all items from the cache on dispose",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 23,
            "description": "Sets the application's default config",
            "itemtype": "method",
            "name": "setDefault",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the default config",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 33,
            "description": "Gets the application's current config environment name",
            "itemtype": "method",
            "name": "currentEnvironment",
            "static": 1,
            "return": {
                "description": "The name of the current environment",
                "type": "String"
            },
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 43,
            "description": "Retrieves a value from the configuration",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "The name of the parameter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the parameter",
                "type": "Object"
            },
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 50,
            "description": "Retrieves a value from the configuration",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the config",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The name of the parameter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the parameter",
                "type": "Object"
            },
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 61,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 66,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/Config.js",
            "line": 75,
            "description": "Disposes of all translations",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 41,
            "description": "The time of day abbreviation. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "timeOfDayDesignatorAbbr",
            "type": "Array",
            "static": 1,
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 51,
            "description": "The time of day. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "timeOfDayDesignator",
            "type": "Array",
            "static": 1,
            "default": "[\"AM\", \"PM\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 62,
            "description": "The abbreviated days of the week. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "daysOfWeekAbbr",
            "type": "Array",
            "static": 1,
            "default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 78,
            "description": "The days of the week. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "daysOfWeek",
            "type": "Array",
            "static": 1,
            "default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 94,
            "description": "The abbreviated months. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "monthsAbbr",
            "type": "Array",
            "static": 1,
            "default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 115,
            "description": "The months. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "months",
            "type": "Array",
            "static": 1,
            "default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 136,
            "description": "Object containing the functions used by each date format code. Default format codes are:\n\n<dl>\n<dt>d</dt> <dd>Day of month (1 - 31)</dd>\n<dt>dd</dt> <dd>Padded day of month (01 - 31)</dd>\n<dt>ddd</dt> <dd>Abbreviated day of week (Sun - Sat)</dd>\n<dt>ddd</dt> <dd>Full day of week (Sunday - Saturday)</dd>\n<dt>f</dt> <dd>Tenth of a second</dd>\n<dt>ff</dt> <dd>Hundreth of a second</dd>\n<dt>fff</dt> <dd>Milliseconds</dd>\n<dt>h</dt> <dd>Twelve-hour clock hour (1 - 12)</dd>\n<dt>hh</dt> <dd>Padded twelve-hour clock hour (01 - 12)</dd>\n<dt>H</dt> <dd>Twenty-four hour clock hour (0 - 23)</dd>\n<dt>HH</dt> <dd>Padded twenty-four hour clock hour (00 - 23)</dd>\n<dt>m</dt> <dd>Minute (0 - 59)</dd>\n<dt>mm</dt> <dd>Padded minute (00 - 59)</dd>\n<dt>M</dt> <dd>Month (1 - 12)</dd>\n<dt>MM</dt> <dd>Padded month (01 - 12)</dd>\n<dt>MMM</dt> <dd>Abbreviated month (Jan - Dec)</dd>\n<dt>MMMM</dt> <dd>Full month (January - December)</dd>\n<dt>s</dt> <dd>Second (0 - 59)</dd>\n<dt>ss</dt> <dd>Padded second (00 - 59)</dd>\n<dt>t</dt> <dd>Abbreviated AM/PM designator (A or P)</dd>\n<dt>tt</dt> <dd>Full AM/PM designator (AM or PM)</dd>\n<dt>y</dt> <dd>Short year (0 - 99)</dd>\n<dt>yy</dt> <dd>Padded short year (00 - 99)</dd>\n<dt>yyy</dt> <dd>Full year padded to at least 3 digits (000+)</dd>\n<dt>yyyy</dt> <dd>Full year padded to at least 4 digits (0000+)</dd>\n<dt>z</dt> <dd>Hours offset from UTC (-12, 0, 12)</dd>\n<dt>zz</dt> <dd>Padded hours offset from UTC (-12, 00, 12)</dd>\n<dt>zzz</dt> <dd>Padded hours and minute offset from UTC (-12:00, 00:00, 12:00)</dd>\n</dl>\n\nTo add a custom format code, assign this property an object containing an <code>i</code> function (responsible for parsing)\nand an <code>o</code> function (responsible for stringifying). The <code>i</code> function\nshould assign to one of the following properties of its second argument: date, month, year,\nhour, minute, second, ms, or offset. Example: <code>Lavaca.util.DateUtils.fn.QQQ = {i: function(input, dateObj, mappedObj) { dateObj.date = parseInt(input, 10); }, o: function(date, utc) { return (utc ? date.getUTCDate() : date.getDate()).toString(); }};</code>",
            "itemtype": "property",
            "name": "fn",
            "type": "Object",
            "static": 1,
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 487,
            "itemtype": "method",
            "name": "parse",
            "static": "Converts a string to a date",
            "params": [
                {
                    "name": "s",
                    "description": "The date string",
                    "type": "String"
                },
                {
                    "name": "f",
                    "description": "The format of the date string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed date",
                "type": "Date"
            },
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 535,
            "description": "Converts a date to a string",
            "itemtype": "method",
            "name": "stringify",
            "static": 1,
            "params": [
                {
                    "name": "d",
                    "description": "The date",
                    "type": "Date"
                },
                {
                    "name": "f",
                    "description": "The string format of the date",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stringified date",
                "type": "String"
            },
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/DateUtils.js",
            "line": 543,
            "description": "Converts a date to a string",
            "itemtype": "method",
            "name": "stringify",
            "static": 1,
            "params": [
                {
                    "name": "d",
                    "description": "The date",
                    "type": "Date"
                },
                {
                    "name": "f",
                    "description": "The string format of the date",
                    "type": "String"
                },
                {
                    "name": "utc",
                    "description": "When true, use the UTC date to generate the string",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The stringified date",
                "type": "String"
            },
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/www/js/lavaca/util/Disposable.js",
            "line": 36,
            "description": "Readies the object to be garbage collected",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.util.Disposable"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 34,
            "description": "Whether or not the map has loaded",
            "itemtype": "property",
            "name": "hasLoaded",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 40,
            "description": "The name of the map",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 46,
            "description": "The source URL for the map",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 52,
            "description": "The raw string data for the map",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 58,
            "description": "The cache in which this map stores data",
            "itemtype": "property",
            "name": "cache",
            "type": "Lavaca.util.Cache",
            "default": "new Lavaca.util.Cache()",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 65,
            "description": "Determines whether or not this is the desired lookup",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the lookup",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if this is the lookup",
                "type": "Boolean"
            },
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 75,
            "description": "Gets the value stored under a code",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "code",
                    "description": "The code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value (or null)",
                "type": "Object"
            },
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 93,
            "description": "Adds parameters to this map",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "data",
                    "description": "The parameters to add",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 104,
            "description": "Processes server data to include in this lookup",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "text",
                    "description": "The server data string",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 113,
            "description": "Adds JSON data to this map (synchronous)",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "The URL of the data",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 130,
            "description": "Sets the application's default config",
            "itemtype": "method",
            "name": "setDefault",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The map cache",
                    "type": "Lavaca.util.Cache"
                },
                {
                    "name": "name",
                    "description": "The name of the config",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 145,
            "description": "Finds the most appropriate value for a code",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The maps cache",
                    "type": "Lavaca.util.Cache"
                },
                {
                    "name": "name",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The name of the parameter",
                    "type": "String"
                },
                {
                    "name": "defaultName",
                    "description": "The name of the default map",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the parameter",
                "type": "Object"
            },
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 169,
            "description": "Scans the document for all maps and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The map cache",
                    "type": "Lavaca.util.Cache"
                },
                {
                    "name": "mimeType",
                    "description": "The MIME type of the scripts",
                    "type": "String"
                },
                {
                    "name": "construct",
                    "description": "A function that returns a new map, in\n  the form construct(name, src, code)",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Map.js",
            "line": 197,
            "description": "Disposes of all maps",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The map cache",
                    "type": "Lavaca.util.Cache"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 14,
            "description": "What the \"this\" keyword resolves to in callbacks",
            "itemtype": "property",
            "name": "thisp",
            "type": "Object",
            "default": "null",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 20,
            "description": "Pending handlers for the success event",
            "itemtype": "property",
            "name": "resolvedQueue",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 26,
            "description": "Pending handlers for the error event",
            "itemtype": "property",
            "name": "rejectedQueue",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 33,
            "description": "Flag indicating that the promise completed successfully",
            "itemtype": "property",
            "name": "succeeded",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 39,
            "description": "Flag indicating that the promise failed to complete",
            "itemtype": "property",
            "name": "failed",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 45,
            "description": "Queues a callback to be executed when the promise succeeds",
            "itemtype": "method",
            "name": "success",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 62,
            "description": "Queues a callback to be executed when the promise fails",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 79,
            "description": "Queues a callback to be executed when the promise is either rejected or resolved",
            "itemtype": "method",
            "name": "always",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 89,
            "description": "Queues up callbacks after the promise is completed",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "resolved",
                    "description": "A callback to execute when the operation succeeds",
                    "type": "Function"
                },
                {
                    "name": "rejected",
                    "description": "A callback to execute when the operation fails",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 102,
            "description": "Resolves the promise successfully",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "value",
                    "description": "Values to pass to the queued success callbacks",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 121,
            "description": "Resolves the promise as a failure",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "err",
                    "description": "Failure messages",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 140,
            "description": "Queues this promise to be resolved only after several other promises\n  have been successfully resolved, or immediately rejected when one\n  of those promises is rejected",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "promise",
                    "description": "One or more other promises",
                    "type": "Lavaca.util.Promise"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 172,
            "description": "Produces a callback that resolves the promise with any number of arguments",
            "itemtype": "method",
            "name": "resolver",
            "return": {
                "description": "The callback",
                "type": "Function"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 183,
            "description": "Produces a callback that rejects the promise with any number of arguments",
            "itemtype": "method",
            "name": "rejector",
            "return": {
                "description": "The callback",
                "type": "Function"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 196,
            "description": "Creates a promise to be resolved only after several other promises\n   have been successfully resolved, or immediately rejected when one\n   of those promises is rejected",
            "itemtype": "method",
            "name": "when",
            "static": 1,
            "params": [
                {
                    "name": "promise",
                    "description": "One or more other promises",
                    "type": "Lavaca.util.Promise"
                }
            ],
            "return": {
                "description": "The new promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/Promise.js",
            "line": 206,
            "description": "Creates a promise to be resolved only after several other promises\n  have been successfully resolved, or immediately rejected when one\n  of those promises is rejected",
            "itemtype": "method",
            "name": "when",
            "static": 1,
            "params": [
                {
                    "name": "thisp",
                    "description": "The execution context of the promise",
                    "type": "Object"
                },
                {
                    "name": "promise",
                    "description": "One or more other promises",
                    "type": "Lavaca.util.Promise"
                }
            ],
            "return": {
                "description": "The new promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/www/js/lavaca/util/StringUtils.js",
            "line": 21,
            "description": "Substitutes arguments into a string",
            "itemtype": "method",
            "name": "format",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The format string. Substitutions should be in the form {0} to sub in\n  the first arg, {1} for the second, and so on",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "Arguments to be substituted in to the string",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The format string with the arguments substituted into it",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/www/js/lavaca/util/StringUtils.js",
            "line": 30,
            "description": "Substitutes arguments into a string",
            "itemtype": "method",
            "name": "format",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The format string. Substitutions should be in the form {0} to sub in\n  the first arg, {1} for the second, and so on",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments to be substituted in to the string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The format string with the arguments substituted into it",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/www/js/lavaca/util/StringUtils.js",
            "line": 39,
            "description": "Substitutes arguments into a string",
            "itemtype": "method",
            "name": "format",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The format string. Substitutions should be in the form {0} to sub in\n  the first arg, {1} for the second, and so on",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments to be substituted in to the string",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "A function to call on each argument, the result of which is substituted into the string",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The format string with the arguments substituted into it",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/www/js/lavaca/util/StringUtils.js",
            "line": 66,
            "description": "Escapes a string for inclusion in HTML",
            "itemtype": "method",
            "name": "escapeHTML",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The escaped string",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 32,
            "description": "The ISO 639-2 code for the translation's language",
            "itemtype": "property",
            "name": "language",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 38,
            "description": "The ISO 3166-1 code for the translation's country",
            "itemtype": "property",
            "name": "country",
            "type": "String",
            "default": "''",
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 44,
            "description": "The locale of this translation (either lang or lang_COUNTRY)",
            "itemtype": "property",
            "name": "locale",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 53,
            "description": "Determines whether or not this translation works for a locale",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "language",
                    "description": "The locale's language",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if this translation applies",
                "type": "Boolean"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 59,
            "description": "Determines whether or not this translation works for a locale",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "language",
                    "description": "The locale's language",
                    "type": "String"
                },
                {
                    "name": "country",
                    "description": "(Optional) The locale's country",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if this translation applies",
                "type": "Boolean"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 71,
            "description": "Sets the application's default locale",
            "itemtype": "method",
            "name": "setDefault",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "A locale string (ie, \"en\", \"en_US\", or \"es_MX\")",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 82,
            "description": "Finds the most appropriate translation for a given locale",
            "itemtype": "method",
            "name": "forLocale",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The locale",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translation",
                "type": "Lavaca.util.Translation"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 96,
            "description": "Finds the most appropriate translation of a message for the default locale",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "The code under which the message is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translation",
                "type": "Lavaca.util.Translation"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 103,
            "description": "Finds the most appropriate translation of a message for the default locale",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The locale",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The code under which the message is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translation",
                "type": "Lavaca.util.Translation"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 135,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The default locale",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 141,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The default locale",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/Translation.js",
            "line": 152,
            "description": "Disposes of all translations",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/www/js/lavaca/util/delay.js",
            "line": 6,
            "description": "Delays the execution of a function",
            "itemtype": "method",
            "name": "delay",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to execute on delay",
                    "type": "Function"
                }
            ],
            "class": "lavaca.util.delay"
        },
        {
            "file": "src/www/js/lavaca/util/delay.js",
            "line": 13,
            "description": "Delays the execution of a function",
            "itemtype": "method",
            "name": "delay",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to execute on delay",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The object to use as the \"this\" keyword",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The timeout ID",
                "type": "Number"
            },
            "class": "lavaca.util.delay"
        },
        {
            "file": "src/www/js/lavaca/util/delay.js",
            "line": 21,
            "description": "Delays the execution of a function",
            "itemtype": "method",
            "name": "delay",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to execute on delay",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The object to use as the \"this\" keyword",
                    "type": "Object"
                },
                {
                    "name": "ms",
                    "description": "The number of milliseconds to delay execution",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The timeout ID",
                "type": "Number"
            },
            "class": "lavaca.util.delay"
        },
        {
            "file": "src/www/js/lavaca/util/extend.js",
            "line": 7,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/www/js/lavaca/util/extend.js",
            "line": 14,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "TSub",
                    "description": "The child type which will inherit from superType",
                    "type": "Function"
                },
                {
                    "name": "overrides",
                    "description": "A hash of key-value pairs that will be added to the subType",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The subtype",
                "type": "Function"
            },
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/www/js/lavaca/util/extend.js",
            "line": 24,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "TSuper",
                    "description": "The base type to extend",
                    "type": "Function"
                },
                {
                    "name": "TSub",
                    "description": "The child type which will inherit from superType",
                    "type": "Function"
                },
                {
                    "name": "overrides",
                    "description": "A hash of key-value pairs that will be added to the subType",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The subtype",
                "type": "Function"
            },
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/www/js/lavaca/util/log.js",
            "line": 6,
            "description": "Logs to the console (or alerts if no console exists)",
            "itemtype": "method",
            "name": "log",
            "static": 1,
            "params": [
                {
                    "name": "arg",
                    "description": "The content to be logged",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.log"
        },
        {
            "file": "src/www/js/lavaca/util/resolve.js",
            "line": 7,
            "description": "Looks up or creates an object, given its global path (ie, 'Lavaca.resolve' resolves to this function,\n'no.obj.exists' resolves to null)",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The fully-qualified name of the object to look up",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resolved object",
                "type": "Object"
            },
            "class": "lavaca.util.resolve"
        },
        {
            "file": "src/www/js/lavaca/util/resolve.js",
            "line": 16,
            "description": "Looks up or creates an object, given its global path (ie, 'Lavaca.resolve' resolves to this function,\n'no.obj.exists' resolves to null)",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The fully-qualified name of the object to look up",
                    "type": "String"
                },
                {
                    "name": "createIfNotExists",
                    "description": "When true, any part of the name that doesn't already exist will be created\nas an empty object",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The resolved object",
                "type": "Object"
            },
            "class": "lavaca.util.resolve"
        },
        {
            "file": "src/www/js/lavaca/util/uuid.js",
            "line": 8,
            "description": "Produces a unique identifier",
            "itemtype": "method",
            "name": "uuid",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "A string served the namespace of a uuid",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A number that is unique to this page",
                "type": "Number"
            },
            "class": "lavaca.util.uuid"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: super",
            "line": " src/www/js/app/ui/views/controls/HeaderView.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:179"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:469"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " src/www/js/extlibs/jquery.hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:577"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:612"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:625"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:644"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:657"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:674"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:690"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:840"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/extlibs/jquery.hammer.js:888"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1034"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1080"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1126"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1160"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1265"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1355"
        },
        {
            "message": "unknown tag: events",
            "line": " src/www/js/extlibs/jquery.hammer.js:1391"
        },
        {
            "message": "unknown tag: this",
            "line": " src/www/js/extlibs/jquery.hammer.js:1472"
        },
        {
            "message": "unknown tag: this",
            "line": " src/www/js/extlibs/jquery.hammer.js:1486"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:125"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:125"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:125"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:125"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:125"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:125"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:144"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:144"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:144"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:144"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:144"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Animation.js:144"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/www/js/lavaca/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: super",
            "line": " src/www/js/lavaca/mvc/Collection.js:57"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/mvc/Collection.js:183"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/mvc/Collection.js:234"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/mvc/Collection.js:241"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/mvc/Collection.js:286"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/mvc/Collection.js:293"
        },
        {
            "message": "unknown tag: sig",
            "line": " src/www/js/lavaca/mvc/Collection.js:464"
        },
        {
            "message": "unknown tag: sig",
            "line": " src/www/js/lavaca/mvc/Model.js:291"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/mvc/Model.js:639"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/mvc/Model.js:646"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/mvc/Router.js:18"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/mvc/Router.js:24"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/mvc/Router.js:32"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/mvc/Router.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/www/js/lavaca/net/History.js:125"
        },
        {
            "message": "unknown tag: field",
            "line": " src/www/js/lavaca/storage/LocalStore.js:35"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/Promise.js:102"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/Promise.js:121"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/Promise.js:140"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/Promise.js:196"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/Promise.js:206"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/StringUtils.js:21"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/www/js/lavaca/util/log.js:6"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " src/www/js/extlibs/jquery.hammer.js:10"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " src/www/js/extlibs/jquery.hammer.js:80"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " src/www/js/extlibs/jquery.hammer.js:106"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " src/www/js/extlibs/jquery.hammer.js:149"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " src/www/js/extlibs/jquery.hammer.js:164"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " src/www/js/extlibs/jquery.hammer.js:179"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " src/www/js/extlibs/jquery.hammer.js:203"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " src/www/js/extlibs/jquery.hammer.js:214"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " src/www/js/extlibs/jquery.hammer.js:223"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " src/www/js/extlibs/jquery.hammer.js:230"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " src/www/js/extlibs/jquery.hammer.js:238"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " src/www/js/extlibs/jquery.hammer.js:252"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " src/www/js/extlibs/jquery.hammer.js:345"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " src/www/js/extlibs/jquery.hammer.js:379"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " src/www/js/extlibs/jquery.hammer.js:405"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " src/www/js/extlibs/jquery.hammer.js:429"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " src/www/js/extlibs/jquery.hammer.js:443"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " src/www/js/extlibs/jquery.hammer.js:450"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " src/www/js/extlibs/jquery.hammer.js:463"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " src/www/js/extlibs/jquery.hammer.js:469"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " src/www/js/extlibs/jquery.hammer.js:484"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " src/www/js/extlibs/jquery.hammer.js:501"
        },
        {
            "message": "Missing item type\nget events",
            "line": " src/www/js/extlibs/jquery.hammer.js:519"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " src/www/js/extlibs/jquery.hammer.js:530"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " src/www/js/extlibs/jquery.hammer.js:540"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " src/www/js/extlibs/jquery.hammer.js:559"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " src/www/js/extlibs/jquery.hammer.js:577"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " src/www/js/extlibs/jquery.hammer.js:597"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " src/www/js/extlibs/jquery.hammer.js:612"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " src/www/js/extlibs/jquery.hammer.js:625"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " src/www/js/extlibs/jquery.hammer.js:644"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " src/www/js/extlibs/jquery.hammer.js:657"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " src/www/js/extlibs/jquery.hammer.js:674"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " src/www/js/extlibs/jquery.hammer.js:690"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " src/www/js/extlibs/jquery.hammer.js:700"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " src/www/js/extlibs/jquery.hammer.js:754"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " src/www/js/extlibs/jquery.hammer.js:778"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " src/www/js/extlibs/jquery.hammer.js:822"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " src/www/js/extlibs/jquery.hammer.js:840"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " src/www/js/extlibs/jquery.hammer.js:888"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " src/www/js/extlibs/jquery.hammer.js:927"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " src/www/js/extlibs/jquery.hammer.js:1034"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " src/www/js/extlibs/jquery.hammer.js:1080"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " src/www/js/extlibs/jquery.hammer.js:1126"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " src/www/js/extlibs/jquery.hammer.js:1160"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " src/www/js/extlibs/jquery.hammer.js:1265"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " src/www/js/extlibs/jquery.hammer.js:1355"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " src/www/js/extlibs/jquery.hammer.js:1391"
        },
        {
            "message": "Missing item type\nbind dom events\nthis overwrites addEventListener",
            "line": " src/www/js/extlibs/jquery.hammer.js:1431"
        },
        {
            "message": "Missing item type\nthe methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "line": " src/www/js/extlibs/jquery.hammer.js:1472"
        },
        {
            "message": "Missing item type\ntrigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "line": " src/www/js/extlibs/jquery.hammer.js:1486"
        },
        {
            "message": "Missing item type\njQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "line": " src/www/js/extlibs/jquery.hammer.js:1507"
        },
        {
            "message": "Missing item type\nCreates an application",
            "line": " src/www/js/lavaca/mvc/Application.js:35"
        },
        {
            "message": "Missing item type",
            "line": " src/www/js/lavaca/mvc/Model.js:639"
        },
        {
            "message": "Missing item type",
            "line": " src/www/js/lavaca/mvc/Model.js:646"
        },
        {
            "message": "Missing item type",
            "line": " src/www/js/lavaca/mvc/Router.js:18"
        },
        {
            "message": "Missing item type",
            "line": " src/www/js/lavaca/mvc/Router.js:24"
        },
        {
            "message": "Missing item type",
            "line": " src/www/js/lavaca/mvc/Router.js:32"
        },
        {
            "message": "Missing item type",
            "line": " src/www/js/lavaca/mvc/Router.js:38"
        },
        {
            "message": "Missing item type\nA list of keys found in the store",
            "line": " src/www/js/lavaca/storage/LocalStore.js:35"
        }
    ]
}